package com.sam_chordas.android.stockhawk.ui;


import android.graphics.Color;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;

import com.sam_chordas.android.stockhawk.R;
import com.sam_chordas.android.stockhawk.api.ResponseHistoricalData;
import com.sam_chordas.android.stockhawk.api.StockAPIClient;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import butterknife.BindView;
import butterknife.ButterKnife;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class StockGraphActivity extends AppCompatActivity {
    @BindView(R.id.linechart) LineChartView chartView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      setContentView(R.layout.activity_line_graph);
      ButterKnife.bind(this);

      // Fetch historical data for the quote
      String symbol = getIntent().getExtras().getString("Symbol");
      SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
      Date currentDate = new Date();

      Calendar calEnd = Calendar.getInstance();
      calEnd.setTime(currentDate);
      calEnd.add(Calendar.DATE, 0);

      Calendar calStart = Calendar.getInstance();
      calStart.setTime(currentDate);
      calStart.add(Calendar.MONTH, -1);

      String startDate = dateFormat.format(calStart.getTime());
      String endDate = dateFormat.format(calEnd.getTime());

      String query = "select * from yahoo.finance.historicaldata where symbol=\"" + symbol +
              "\" and startDate=\"" + startDate + "\" and endDate=\"" + endDate + "\"";

      Retrofit retrofit = new Retrofit.Builder()
              .baseUrl(StockAPIClient.API_BASE_URL)
              .addConverterFactory(GsonConverterFactory.create())
              .build();

      StockAPIClient stockService = retrofit.create(StockAPIClient.class);
      stockService.getStockHistoricalData(query).enqueue(new Callback<ResponseHistoricalData>() {
        @Override
        public void onResponse(Call<ResponseHistoricalData> call, Response<ResponseHistoricalData> response) {
          ResponseHistoricalData historicalData = response.body();
          // Setting up the dataset for the chart
          LineChartData lineChartData = new LineChartData();
          List<AxisValue> axisValuesX = new ArrayList<>();
          List<PointValue> pointValues = new ArrayList<>();
          List<ResponseHistoricalData.Quote> historicalQuotes = historicalData.getHistoricData();
          try {
            int numQuotes = historicalQuotes.size(), counter = 0;
            for(ResponseHistoricalData.Quote quote: historicalQuotes) {
              int x = numQuotes - 1 - counter;
              PointValue pointValue = new PointValue(x, Float.valueOf(quote.getOpen()));
              pointValue.setLabel(quote.getDate());

              AxisValue axisValueX = new AxisValue(x);
              axisValueX.setLabel(quote.getDate());
              axisValuesX.add(axisValueX);

              counter++;
            }
          } catch(NumberFormatException ex) {
            ex.printStackTrace();
          }


          Line line = new Line(pointValues).setColor(Color.WHITE).setCubic(false);
          List<Line> lines = new ArrayList<>();
          lines.add(line);

          // Init x-axis
          Axis axisX = new Axis(axisValuesX);
          axisX.setHasLines(true);
          axisX.setMaxLabelChars(4);
          lineChartData.setAxisXBottom(axisX);

          // Init y-axis
          Axis axisY = new Axis();
          axisY.setAutoGenerated(true);
          axisY.setHasLines(true);
          axisY.setMaxLabelChars(4);
          lineChartData.setAxisYLeft(axisY);

        }

        @Override
        public void onFailure(Call<ResponseHistoricalData> call, Throwable t) {

        }
      });
    }
}
